
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000720  000007b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800072  00800072  000007c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bce  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000778  00000000  00000000  00001482  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057a  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003dd  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ec  00000000  00000000  0000270d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002bf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_1>
   8:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  8a:	0c 94 8e 03 	jmp	0x71c	; 0x71c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <newNode>:
char queueIsEmpty(struct Queue* q){
	if(q->front == NULL)
		return 1;
	
	return 0;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
  98:	84 e0       	ldi	r24, 0x04	; 4
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 6d 02 	call	0x4da	; 0x4da <malloc>
  a0:	fc 01       	movw	r30, r24
  a2:	d1 83       	std	Z+1, r29	; 0x01
  a4:	c0 83       	st	Z, r28
  a6:	13 82       	std	Z+3, r1	; 0x03
  a8:	12 82       	std	Z+2, r1	; 0x02
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <createQueue>:
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 6d 02 	call	0x4da	; 0x4da <malloc>
  b8:	fc 01       	movw	r30, r24
  ba:	13 82       	std	Z+3, r1	; 0x03
  bc:	12 82       	std	Z+2, r1	; 0x02
  be:	11 82       	std	Z+1, r1	; 0x01
  c0:	10 82       	st	Z, r1
  c2:	08 95       	ret

000000c4 <enQueue>:
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	ec 01       	movw	r28, r24
  ca:	cb 01       	movw	r24, r22
  cc:	0e 94 49 00 	call	0x92	; 0x92 <newNode>
  d0:	ea 81       	ldd	r30, Y+2	; 0x02
  d2:	fb 81       	ldd	r31, Y+3	; 0x03
  d4:	30 97       	sbiw	r30, 0x00	; 0
  d6:	29 f4       	brne	.+10     	; 0xe2 <enQueue+0x1e>
  d8:	9b 83       	std	Y+3, r25	; 0x03
  da:	8a 83       	std	Y+2, r24	; 0x02
  dc:	99 83       	std	Y+1, r25	; 0x01
  de:	88 83       	st	Y, r24
  e0:	04 c0       	rjmp	.+8      	; 0xea <enQueue+0x26>
  e2:	93 83       	std	Z+3, r25	; 0x03
  e4:	82 83       	std	Z+2, r24	; 0x02
  e6:	9b 83       	std	Y+3, r25	; 0x03
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <deQueue>:
  f0:	cf 93       	push	r28
  f2:	dc 01       	movw	r26, r24
  f4:	ed 91       	ld	r30, X+
  f6:	fc 91       	ld	r31, X
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	30 97       	sbiw	r30, 0x00	; 0
  fc:	89 f0       	breq	.+34     	; 0x120 <deQueue+0x30>
  fe:	82 81       	ldd	r24, Z+2	; 0x02
 100:	93 81       	ldd	r25, Z+3	; 0x03
 102:	11 96       	adiw	r26, 0x01	; 1
 104:	9c 93       	st	X, r25
 106:	8e 93       	st	-X, r24
 108:	89 2b       	or	r24, r25
 10a:	21 f4       	brne	.+8      	; 0x114 <deQueue+0x24>
 10c:	13 96       	adiw	r26, 0x03	; 3
 10e:	1c 92       	st	X, r1
 110:	1e 92       	st	-X, r1
 112:	12 97       	sbiw	r26, 0x02	; 2
 114:	c0 81       	ld	r28, Z
 116:	cf 01       	movw	r24, r30
 118:	0e 94 05 03 	call	0x60a	; 0x60a <free>
 11c:	8c 2f       	mov	r24, r28
 11e:	00 c0       	rjmp	.+0      	; 0x120 <deQueue+0x30>
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <containsInQueue>:
 124:	dc 01       	movw	r26, r24
 126:	ed 91       	ld	r30, X+
 128:	fc 91       	ld	r31, X
 12a:	30 97       	sbiw	r30, 0x00	; 0
 12c:	69 f0       	breq	.+26     	; 0x148 <containsInQueue+0x24>
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	91 81       	ldd	r25, Z+1	; 0x01
 134:	86 17       	cp	r24, r22
 136:	97 07       	cpc	r25, r23
 138:	49 f0       	breq	.+18     	; 0x14c <containsInQueue+0x28>
 13a:	02 80       	ldd	r0, Z+2	; 0x02
 13c:	f3 81       	ldd	r31, Z+3	; 0x03
 13e:	e0 2d       	mov	r30, r0
 140:	30 97       	sbiw	r30, 0x00	; 0
 142:	b1 f3       	breq	.-20     	; 0x130 <containsInQueue+0xc>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	08 95       	ret

00000150 <gotoNextFloor>:
		gotoNextFloor(next_floor);
	}
}

void gotoNextFloor(int nxt){
	if(floor_number < nxt){
 150:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <floor_number>
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	28 17       	cp	r18, r24
 158:	39 07       	cpc	r19, r25
 15a:	34 f4       	brge	.+12     	; 0x168 <gotoNextFloor+0x18>
		PORTD = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	82 bb       	out	0x12, r24	; 18
		PORTD |= 0xF0; // closing all the doors
 160:	82 b3       	in	r24, 0x12	; 18
 162:	80 6f       	ori	r24, 0xF0	; 240
 164:	82 bb       	out	0x12, r24	; 18
 166:	19 c0       	rjmp	.+50     	; 0x19a <gotoNextFloor+0x4a>
	}else if( floor_number == nxt){
 168:	28 17       	cp	r18, r24
 16a:	39 07       	cpc	r19, r25
 16c:	89 f4       	brne	.+34     	; 0x190 <gotoNextFloor+0x40>
		PORTD |= 0xF0; // closing all the doors
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	80 6f       	ori	r24, 0xF0	; 240
 172:	82 bb       	out	0x12, r24	; 18
		PORTD &= (~(1 << (nxt + 3))); // open the door lock
 174:	42 b3       	in	r20, 0x12	; 18
 176:	2d 5f       	subi	r18, 0xFD	; 253
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <gotoNextFloor+0x34>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	2a 95       	dec	r18
 186:	e2 f7       	brpl	.-8      	; 0x180 <gotoNextFloor+0x30>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	05 c0       	rjmp	.+10     	; 0x19a <gotoNextFloor+0x4a>
	}else{
		PORTD = 2;
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	82 bb       	out	0x12, r24	; 18
		PORTD |= 0xF0; // closing all door locks
 194:	82 b3       	in	r24, 0x12	; 18
 196:	80 6f       	ori	r24, 0xF0	; 240
 198:	82 bb       	out	0x12, r24	; 18
	}
	TCCR0 = 0x05;
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	83 bf       	out	0x33, r24	; 51
	ismoving = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
 1a4:	08 95       	ret

000001a6 <detectAndMove>:
char ismoving = 0;


void gotoNextFloor(int);

void detectAndMove(){
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
	switch(PINB){
 1aa:	86 b3       	in	r24, 0x16	; 22
 1ac:	8f 3e       	cpi	r24, 0xEF	; 239
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <detectAndMove+0xc>
 1b0:	5a c0       	rjmp	.+180    	; 0x266 <detectAndMove+0xc0>
 1b2:	50 f4       	brcc	.+20     	; 0x1c8 <detectAndMove+0x22>
 1b4:	8f 3b       	cpi	r24, 0xBF	; 191
 1b6:	09 f4       	brne	.+2      	; 0x1ba <detectAndMove+0x14>
 1b8:	76 c0       	rjmp	.+236    	; 0x2a6 <detectAndMove+0x100>
 1ba:	8f 3d       	cpi	r24, 0xDF	; 223
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <detectAndMove+0x1a>
 1be:	63 c0       	rjmp	.+198    	; 0x286 <detectAndMove+0xe0>
 1c0:	8f 37       	cpi	r24, 0x7F	; 127
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <detectAndMove+0x20>
 1c4:	8f c0       	rjmp	.+286    	; 0x2e4 <detectAndMove+0x13e>
 1c6:	7f c0       	rjmp	.+254    	; 0x2c6 <detectAndMove+0x120>
 1c8:	8b 3f       	cpi	r24, 0xFB	; 251
 1ca:	59 f1       	breq	.+86     	; 0x222 <detectAndMove+0x7c>
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <detectAndMove+0x2e>
 1ce:	87 3f       	cpi	r24, 0xF7	; 247
 1d0:	c9 f1       	breq	.+114    	; 0x244 <detectAndMove+0x9e>
 1d2:	88 c0       	rjmp	.+272    	; 0x2e4 <detectAndMove+0x13e>
 1d4:	8d 3f       	cpi	r24, 0xFD	; 253
 1d6:	a1 f0       	breq	.+40     	; 0x200 <detectAndMove+0x5a>
 1d8:	8e 3f       	cpi	r24, 0xFE	; 254
 1da:	09 f0       	breq	.+2      	; 0x1de <detectAndMove+0x38>
 1dc:	83 c0       	rjmp	.+262    	; 0x2e4 <detectAndMove+0x13e>
		case 0b11111110 :{
			if( containsInQueue(q, 1) != 1){
 1de:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 1e2:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	ce 01       	movw	r24, r28
 1ea:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <detectAndMove+0x4e>
 1f2:	78 c0       	rjmp	.+240    	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 1);
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 1fe:	72 c0       	rjmp	.+228    	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b11111101 :{
			if( containsInQueue(q, 2) != 1){
 200:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 204:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	ce 01       	movw	r24, r28
 20c:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	09 f4       	brne	.+2      	; 0x216 <detectAndMove+0x70>
 214:	67 c0       	rjmp	.+206    	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 2);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 220:	61 c0       	rjmp	.+194    	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b11111011 :{
			if( containsInQueue(q, 3) != 1){
 222:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 226:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 22a:	63 e0       	ldi	r22, 0x03	; 3
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	09 f4       	brne	.+2      	; 0x238 <detectAndMove+0x92>
 236:	56 c0       	rjmp	.+172    	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 3);
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 242:	50 c0       	rjmp	.+160    	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b11110111 :{
			if( containsInQueue(q, 4) != 1){
 244:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 248:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 24c:	64 e0       	ldi	r22, 0x04	; 4
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	09 f4       	brne	.+2      	; 0x25a <detectAndMove+0xb4>
 258:	45 c0       	rjmp	.+138    	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 4);
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	ce 01       	movw	r24, r28
 260:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 264:	3f c0       	rjmp	.+126    	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b11101111 :{
			if( containsInQueue(q, 1) != 1){
 266:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 26a:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	ce 01       	movw	r24, r28
 272:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	a9 f1       	breq	.+106    	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 1);
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 284:	2f c0       	rjmp	.+94     	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b11011111 :{
			if(containsInQueue(q, 2) != 1){
 286:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 28a:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	ce 01       	movw	r24, r28
 292:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	29 f1       	breq	.+74     	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 2);
 29a:	62 e0       	ldi	r22, 0x02	; 2
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	ce 01       	movw	r24, r28
 2a0:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 2a4:	1f c0       	rjmp	.+62     	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b10111111 :{
			if( containsInQueue(q, 3) != 1){
 2a6:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 2aa:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 2ae:	63 e0       	ldi	r22, 0x03	; 3
 2b0:	ce 01       	movw	r24, r28
 2b2:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	a9 f0       	breq	.+42     	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 3);
 2ba:	63 e0       	ldi	r22, 0x03	; 3
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
 2c4:	0f c0       	rjmp	.+30     	; 0x2e4 <detectAndMove+0x13e>
			}
		}	break;
		case 0b01111111 :{
			if( containsInQueue(q, 4) != 1){
 2c6:	c0 91 74 00 	lds	r28, 0x0074	; 0x800074 <q>
 2ca:	d0 91 75 00 	lds	r29, 0x0075	; 0x800075 <q+0x1>
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 92 00 	call	0x124	; 0x124 <containsInQueue>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	29 f0       	breq	.+10     	; 0x2e4 <detectAndMove+0x13e>
				enQueue(q, 4);
 2da:	64 e0       	ldi	r22, 0x04	; 4
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	ce 01       	movw	r24, r28
 2e0:	0e 94 62 00 	call	0xc4	; 0xc4 <enQueue>
			}
		}	break;
	}
	
	if(!queueIsEmpty(q) && ismoving != 1){
 2e4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <q>
 2e8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <q+0x1>
 2ec:	80 81       	ld	r24, Z
 2ee:	91 81       	ldd	r25, Z+1	; 0x01
 2f0:	89 2b       	or	r24, r25
 2f2:	61 f0       	breq	.+24     	; 0x30c <detectAndMove+0x166>
 2f4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	41 f0       	breq	.+16     	; 0x30c <detectAndMove+0x166>
		next_floor = deQueue(q);
 2fc:	cf 01       	movw	r24, r30
 2fe:	0e 94 78 00 	call	0xf0	; 0xf0 <deQueue>
 302:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		gotoNextFloor(next_floor);
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 a8 00 	call	0x150	; 0x150 <gotoNextFloor>
	}
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <__vector_11>:
	TCCR0 = 0x05;
	ismoving = 1;
}

ISR (TIMER0_OVF_vect)
{
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	8f 93       	push	r24
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
	if(flg){
 322:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <flg>
 326:	88 23       	and	r24, r24
 328:	51 f0       	breq	.+20     	; 0x33e <__vector_11+0x2c>
		PORTC = sevseg[next_floor];
 32a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <next_floor>
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	e8 59       	subi	r30, 0x98	; 152
 332:	ff 4f       	sbci	r31, 0xFF	; 255
 334:	80 81       	ld	r24, Z
 336:	85 bb       	out	0x15, r24	; 21
		flg = 0;
 338:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flg>
 33c:	04 c0       	rjmp	.+8      	; 0x346 <__vector_11+0x34>
	}else{
		PORTC = 0;
 33e:	15 ba       	out	0x15, r1	; 21
		flg = 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <flg>
	}
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_2>:

ISR (INT1_vect)
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	switch(PINA){
 378:	89 b3       	in	r24, 0x19	; 25
 37a:	8b 3f       	cpi	r24, 0xFB	; 251
 37c:	81 f0       	breq	.+32     	; 0x39e <__vector_2+0x48>
 37e:	18 f4       	brcc	.+6      	; 0x386 <__vector_2+0x30>
 380:	87 3f       	cpi	r24, 0xF7	; 247
 382:	89 f0       	breq	.+34     	; 0x3a6 <__vector_2+0x50>
 384:	13 c0       	rjmp	.+38     	; 0x3ac <__vector_2+0x56>
 386:	8d 3f       	cpi	r24, 0xFD	; 253
 388:	31 f0       	breq	.+12     	; 0x396 <__vector_2+0x40>
 38a:	8e 3f       	cpi	r24, 0xFE	; 254
 38c:	79 f4       	brne	.+30     	; 0x3ac <__vector_2+0x56>
		case 0b11111110 :{
			floor_number = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
 394:	0b c0       	rjmp	.+22     	; 0x3ac <__vector_2+0x56>
		case 0b11111101 :{
			floor_number = 2;
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <__vector_2+0x56>
		case 0b11111011 :{
			floor_number = 3;
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <__vector_2+0x56>
		case 0b11110111 :{
			floor_number = 4;
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
	}
	PORTA = 0xFF;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	8b bb       	out	0x1b, r24	; 27
	if(next_floor == floor_number){
 3b0:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <next_floor>
 3b4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <floor_number>
 3b8:	98 13       	cpse	r25, r24
 3ba:	11 c0       	rjmp	.+34     	; 0x3de <__vector_2+0x88>
		PORTD &= (255 << 2); // stop the motor
 3bc:	82 b3       	in	r24, 0x12	; 18
 3be:	8c 7f       	andi	r24, 0xFC	; 252
 3c0:	82 bb       	out	0x12, r24	; 18
		PORTD &= (~(1 << (next_floor + 3))); // open the door lock for the current floor
 3c2:	22 b3       	in	r18, 0x12	; 18
 3c4:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <next_floor>
 3c8:	3d 5f       	subi	r19, 0xFD	; 253
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <__vector_2+0x7e>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	3a 95       	dec	r19
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <__vector_2+0x7a>
 3d8:	80 95       	com	r24
 3da:	82 23       	and	r24, r18
 3dc:	82 bb       	out	0x12, r24	; 18
	}
	TCCR0 = 0;
 3de:	13 be       	out	0x33, r1	; 51
	PORTC = sevseg[floor_number];
 3e0:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <floor_number>
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	e8 59       	subi	r30, 0x98	; 152
 3e8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ea:	80 81       	ld	r24, Z
 3ec:	85 bb       	out	0x15, r24	; 21
	return 0;
}


char queueIsEmpty(struct Queue* q){
	if(q->front == NULL)
 3ee:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <q>
 3f2:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <q+0x1>
		PORTD &= (~(1 << (next_floor + 3))); // open the door lock for the current floor
	}
	TCCR0 = 0;
	PORTC = sevseg[floor_number];
	
	if(!queueIsEmpty(q)){
 3f6:	80 81       	ld	r24, Z
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	89 2b       	or	r24, r25
 3fc:	69 f0       	breq	.+26     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fe:	2f e7       	ldi	r18, 0x7F	; 127
 400:	8a e1       	ldi	r24, 0x1A	; 26
 402:	96 e0       	ldi	r25, 0x06	; 6
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
		_delay_ms(2000);
		ismoving = 0;
 410:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
		detectAndMove();
 414:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <detectAndMove>
	}
}
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	bf 91       	pop	r27
 41e:	af 91       	pop	r26
 420:	9f 91       	pop	r25
 422:	8f 91       	pop	r24
 424:	7f 91       	pop	r23
 426:	6f 91       	pop	r22
 428:	5f 91       	pop	r21
 42a:	4f 91       	pop	r20
 42c:	3f 91       	pop	r19
 42e:	2f 91       	pop	r18
 430:	0f 90       	pop	r0
 432:	0f be       	out	0x3f, r0	; 63
 434:	0f 90       	pop	r0
 436:	1f 90       	pop	r1
 438:	18 95       	reti

0000043a <__vector_1>:

ISR (INT0_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
	detectAndMove();
 45c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <detectAndMove>
}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <setup>:


void setup(){
	// TODO : all the setup for ports and configs here
	DDRA = 0xF0; // define as input for sensors
 482:	80 ef       	ldi	r24, 0xF0	; 240
 484:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 486:	8f e0       	ldi	r24, 0x0F	; 15
 488:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0x00; // define as input for input keys
 48a:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF; // set the pull up enable for keys
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	88 bb       	out	0x18, r24	; 24
	DDRC = 0xFF; // set as output for seven segment
 490:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF3; // last two bits output for motor control other bits input
 492:	93 ef       	ldi	r25, 0xF3	; 243
 494:	91 bb       	out	0x11, r25	; 17
	PORTB = 0xFF; // setting pull up and test for the motor
 496:	88 bb       	out	0x18, r24	; 24
	
	PORTD = 0b11110011;
 498:	92 bb       	out	0x12, r25	; 18
	
	GICR |= (1 << INT0); // enabling interrupt 0
 49a:	8b b7       	in	r24, 0x3b	; 59
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= ((1 << ISC01) | (1 << ISC00)); // setting the interrupt 0 to detect rising edge
 4a0:	85 b7       	in	r24, 0x35	; 53
 4a2:	83 60       	ori	r24, 0x03	; 3
 4a4:	85 bf       	out	0x35, r24	; 53
	
	GICR |= (1 << INT1); // enabling interrupt 0
 4a6:	8b b7       	in	r24, 0x3b	; 59
 4a8:	80 68       	ori	r24, 0x80	; 128
 4aa:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= ((1 << ISC11) | (1 << ISC10)); // setting the interrupt 0 to detect rising edge
 4ac:	85 b7       	in	r24, 0x35	; 53
 4ae:	8c 60       	ori	r24, 0x0C	; 12
 4b0:	85 bf       	out	0x35, r24	; 53
	
	TIMSK = 0x01;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	89 bf       	out	0x39, r24	; 57
	
	// really i can say now i am a good avr developer
	sei(); // enabling global interrupt	
 4b6:	78 94       	sei
	
	PORTC = sevseg[next_floor];
 4b8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <next_floor>
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	e8 59       	subi	r30, 0x98	; 152
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	80 81       	ld	r24, Z
 4c4:	85 bb       	out	0x15, r24	; 21
	
	q = createQueue();
 4c6:	0e 94 58 00 	call	0xb0	; 0xb0 <createQueue>
 4ca:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <q+0x1>
 4ce:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <q>
 4d2:	08 95       	ret

000004d4 <main>:


int main(void)
{
	
	setup();
 4d4:	0e 94 41 02 	call	0x482	; 0x482 <setup>
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <main+0x4>

000004da <malloc>:
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	91 05       	cpc	r25, r1
 4e6:	10 f4       	brcc	.+4      	; 0x4ec <malloc+0x12>
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__flp>
 4f0:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__flp+0x1>
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	a0 e0       	ldi	r26, 0x00	; 0
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	30 97       	sbiw	r30, 0x00	; 0
 4fe:	19 f1       	breq	.+70     	; 0x546 <malloc+0x6c>
 500:	40 81       	ld	r20, Z
 502:	51 81       	ldd	r21, Z+1	; 0x01
 504:	02 81       	ldd	r16, Z+2	; 0x02
 506:	13 81       	ldd	r17, Z+3	; 0x03
 508:	48 17       	cp	r20, r24
 50a:	59 07       	cpc	r21, r25
 50c:	c8 f0       	brcs	.+50     	; 0x540 <malloc+0x66>
 50e:	84 17       	cp	r24, r20
 510:	95 07       	cpc	r25, r21
 512:	69 f4       	brne	.+26     	; 0x52e <malloc+0x54>
 514:	10 97       	sbiw	r26, 0x00	; 0
 516:	31 f0       	breq	.+12     	; 0x524 <malloc+0x4a>
 518:	12 96       	adiw	r26, 0x02	; 2
 51a:	0c 93       	st	X, r16
 51c:	12 97       	sbiw	r26, 0x02	; 2
 51e:	13 96       	adiw	r26, 0x03	; 3
 520:	1c 93       	st	X, r17
 522:	27 c0       	rjmp	.+78     	; 0x572 <malloc+0x98>
 524:	00 93 78 00 	sts	0x0078, r16	; 0x800078 <__flp>
 528:	10 93 79 00 	sts	0x0079, r17	; 0x800079 <__flp+0x1>
 52c:	22 c0       	rjmp	.+68     	; 0x572 <malloc+0x98>
 52e:	21 15       	cp	r18, r1
 530:	31 05       	cpc	r19, r1
 532:	19 f0       	breq	.+6      	; 0x53a <malloc+0x60>
 534:	42 17       	cp	r20, r18
 536:	53 07       	cpc	r21, r19
 538:	18 f4       	brcc	.+6      	; 0x540 <malloc+0x66>
 53a:	9a 01       	movw	r18, r20
 53c:	bd 01       	movw	r22, r26
 53e:	ef 01       	movw	r28, r30
 540:	df 01       	movw	r26, r30
 542:	f8 01       	movw	r30, r16
 544:	db cf       	rjmp	.-74     	; 0x4fc <malloc+0x22>
 546:	21 15       	cp	r18, r1
 548:	31 05       	cpc	r19, r1
 54a:	f9 f0       	breq	.+62     	; 0x58a <malloc+0xb0>
 54c:	28 1b       	sub	r18, r24
 54e:	39 0b       	sbc	r19, r25
 550:	24 30       	cpi	r18, 0x04	; 4
 552:	31 05       	cpc	r19, r1
 554:	80 f4       	brcc	.+32     	; 0x576 <malloc+0x9c>
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	9b 81       	ldd	r25, Y+3	; 0x03
 55a:	61 15       	cp	r22, r1
 55c:	71 05       	cpc	r23, r1
 55e:	21 f0       	breq	.+8      	; 0x568 <malloc+0x8e>
 560:	fb 01       	movw	r30, r22
 562:	93 83       	std	Z+3, r25	; 0x03
 564:	82 83       	std	Z+2, r24	; 0x02
 566:	04 c0       	rjmp	.+8      	; 0x570 <malloc+0x96>
 568:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__flp+0x1>
 56c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__flp>
 570:	fe 01       	movw	r30, r28
 572:	32 96       	adiw	r30, 0x02	; 2
 574:	44 c0       	rjmp	.+136    	; 0x5fe <malloc+0x124>
 576:	fe 01       	movw	r30, r28
 578:	e2 0f       	add	r30, r18
 57a:	f3 1f       	adc	r31, r19
 57c:	81 93       	st	Z+, r24
 57e:	91 93       	st	Z+, r25
 580:	22 50       	subi	r18, 0x02	; 2
 582:	31 09       	sbc	r19, r1
 584:	39 83       	std	Y+1, r19	; 0x01
 586:	28 83       	st	Y, r18
 588:	3a c0       	rjmp	.+116    	; 0x5fe <malloc+0x124>
 58a:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__brkval>
 58e:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__brkval+0x1>
 592:	23 2b       	or	r18, r19
 594:	41 f4       	brne	.+16     	; 0x5a6 <malloc+0xcc>
 596:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 59a:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 59e:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <__brkval+0x1>
 5a2:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__brkval>
 5a6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5aa:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5ae:	21 15       	cp	r18, r1
 5b0:	31 05       	cpc	r19, r1
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <malloc+0xea>
 5b4:	2d b7       	in	r18, 0x3d	; 61
 5b6:	3e b7       	in	r19, 0x3e	; 62
 5b8:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 5bc:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 5c0:	24 1b       	sub	r18, r20
 5c2:	35 0b       	sbc	r19, r21
 5c4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__brkval>
 5c8:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__brkval+0x1>
 5cc:	e2 17       	cp	r30, r18
 5ce:	f3 07       	cpc	r31, r19
 5d0:	a0 f4       	brcc	.+40     	; 0x5fa <malloc+0x120>
 5d2:	2e 1b       	sub	r18, r30
 5d4:	3f 0b       	sbc	r19, r31
 5d6:	28 17       	cp	r18, r24
 5d8:	39 07       	cpc	r19, r25
 5da:	78 f0       	brcs	.+30     	; 0x5fa <malloc+0x120>
 5dc:	ac 01       	movw	r20, r24
 5de:	4e 5f       	subi	r20, 0xFE	; 254
 5e0:	5f 4f       	sbci	r21, 0xFF	; 255
 5e2:	24 17       	cp	r18, r20
 5e4:	35 07       	cpc	r19, r21
 5e6:	48 f0       	brcs	.+18     	; 0x5fa <malloc+0x120>
 5e8:	4e 0f       	add	r20, r30
 5ea:	5f 1f       	adc	r21, r31
 5ec:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <__brkval+0x1>
 5f0:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <__brkval>
 5f4:	81 93       	st	Z+, r24
 5f6:	91 93       	st	Z+, r25
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <malloc+0x124>
 5fa:	e0 e0       	ldi	r30, 0x00	; 0
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	cf 01       	movw	r24, r30
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <free>:
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	00 97       	sbiw	r24, 0x00	; 0
 610:	09 f4       	brne	.+2      	; 0x614 <free+0xa>
 612:	81 c0       	rjmp	.+258    	; 0x716 <free+0x10c>
 614:	fc 01       	movw	r30, r24
 616:	32 97       	sbiw	r30, 0x02	; 2
 618:	13 82       	std	Z+3, r1	; 0x03
 61a:	12 82       	std	Z+2, r1	; 0x02
 61c:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__flp>
 620:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__flp+0x1>
 624:	10 97       	sbiw	r26, 0x00	; 0
 626:	81 f4       	brne	.+32     	; 0x648 <free+0x3e>
 628:	20 81       	ld	r18, Z
 62a:	31 81       	ldd	r19, Z+1	; 0x01
 62c:	82 0f       	add	r24, r18
 62e:	93 1f       	adc	r25, r19
 630:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__brkval>
 634:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__brkval+0x1>
 638:	28 17       	cp	r18, r24
 63a:	39 07       	cpc	r19, r25
 63c:	51 f5       	brne	.+84     	; 0x692 <free+0x88>
 63e:	f0 93 77 00 	sts	0x0077, r31	; 0x800077 <__brkval+0x1>
 642:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <__brkval>
 646:	67 c0       	rjmp	.+206    	; 0x716 <free+0x10c>
 648:	ed 01       	movw	r28, r26
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	ce 17       	cp	r28, r30
 650:	df 07       	cpc	r29, r31
 652:	40 f4       	brcc	.+16     	; 0x664 <free+0x5a>
 654:	4a 81       	ldd	r20, Y+2	; 0x02
 656:	5b 81       	ldd	r21, Y+3	; 0x03
 658:	9e 01       	movw	r18, r28
 65a:	41 15       	cp	r20, r1
 65c:	51 05       	cpc	r21, r1
 65e:	f1 f0       	breq	.+60     	; 0x69c <free+0x92>
 660:	ea 01       	movw	r28, r20
 662:	f5 cf       	rjmp	.-22     	; 0x64e <free+0x44>
 664:	d3 83       	std	Z+3, r29	; 0x03
 666:	c2 83       	std	Z+2, r28	; 0x02
 668:	40 81       	ld	r20, Z
 66a:	51 81       	ldd	r21, Z+1	; 0x01
 66c:	84 0f       	add	r24, r20
 66e:	95 1f       	adc	r25, r21
 670:	c8 17       	cp	r28, r24
 672:	d9 07       	cpc	r29, r25
 674:	59 f4       	brne	.+22     	; 0x68c <free+0x82>
 676:	88 81       	ld	r24, Y
 678:	99 81       	ldd	r25, Y+1	; 0x01
 67a:	84 0f       	add	r24, r20
 67c:	95 1f       	adc	r25, r21
 67e:	02 96       	adiw	r24, 0x02	; 2
 680:	91 83       	std	Z+1, r25	; 0x01
 682:	80 83       	st	Z, r24
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	9b 81       	ldd	r25, Y+3	; 0x03
 688:	93 83       	std	Z+3, r25	; 0x03
 68a:	82 83       	std	Z+2, r24	; 0x02
 68c:	21 15       	cp	r18, r1
 68e:	31 05       	cpc	r19, r1
 690:	29 f4       	brne	.+10     	; 0x69c <free+0x92>
 692:	f0 93 79 00 	sts	0x0079, r31	; 0x800079 <__flp+0x1>
 696:	e0 93 78 00 	sts	0x0078, r30	; 0x800078 <__flp>
 69a:	3d c0       	rjmp	.+122    	; 0x716 <free+0x10c>
 69c:	e9 01       	movw	r28, r18
 69e:	fb 83       	std	Y+3, r31	; 0x03
 6a0:	ea 83       	std	Y+2, r30	; 0x02
 6a2:	49 91       	ld	r20, Y+
 6a4:	59 91       	ld	r21, Y+
 6a6:	c4 0f       	add	r28, r20
 6a8:	d5 1f       	adc	r29, r21
 6aa:	ec 17       	cp	r30, r28
 6ac:	fd 07       	cpc	r31, r29
 6ae:	61 f4       	brne	.+24     	; 0x6c8 <free+0xbe>
 6b0:	80 81       	ld	r24, Z
 6b2:	91 81       	ldd	r25, Z+1	; 0x01
 6b4:	84 0f       	add	r24, r20
 6b6:	95 1f       	adc	r25, r21
 6b8:	02 96       	adiw	r24, 0x02	; 2
 6ba:	e9 01       	movw	r28, r18
 6bc:	99 83       	std	Y+1, r25	; 0x01
 6be:	88 83       	st	Y, r24
 6c0:	82 81       	ldd	r24, Z+2	; 0x02
 6c2:	93 81       	ldd	r25, Z+3	; 0x03
 6c4:	9b 83       	std	Y+3, r25	; 0x03
 6c6:	8a 83       	std	Y+2, r24	; 0x02
 6c8:	e0 e0       	ldi	r30, 0x00	; 0
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	12 96       	adiw	r26, 0x02	; 2
 6ce:	8d 91       	ld	r24, X+
 6d0:	9c 91       	ld	r25, X
 6d2:	13 97       	sbiw	r26, 0x03	; 3
 6d4:	00 97       	sbiw	r24, 0x00	; 0
 6d6:	19 f0       	breq	.+6      	; 0x6de <free+0xd4>
 6d8:	fd 01       	movw	r30, r26
 6da:	dc 01       	movw	r26, r24
 6dc:	f7 cf       	rjmp	.-18     	; 0x6cc <free+0xc2>
 6de:	8d 91       	ld	r24, X+
 6e0:	9c 91       	ld	r25, X
 6e2:	11 97       	sbiw	r26, 0x01	; 1
 6e4:	9d 01       	movw	r18, r26
 6e6:	2e 5f       	subi	r18, 0xFE	; 254
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	82 0f       	add	r24, r18
 6ec:	93 1f       	adc	r25, r19
 6ee:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__brkval>
 6f2:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__brkval+0x1>
 6f6:	28 17       	cp	r18, r24
 6f8:	39 07       	cpc	r19, r25
 6fa:	69 f4       	brne	.+26     	; 0x716 <free+0x10c>
 6fc:	30 97       	sbiw	r30, 0x00	; 0
 6fe:	29 f4       	brne	.+10     	; 0x70a <free+0x100>
 700:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__flp+0x1>
 704:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__flp>
 708:	02 c0       	rjmp	.+4      	; 0x70e <free+0x104>
 70a:	13 82       	std	Z+3, r1	; 0x03
 70c:	12 82       	std	Z+2, r1	; 0x02
 70e:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <__brkval+0x1>
 712:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <__brkval>
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <_exit>:
 71c:	f8 94       	cli

0000071e <__stop_program>:
 71e:	ff cf       	rjmp	.-2      	; 0x71e <__stop_program>
