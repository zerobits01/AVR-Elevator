
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000528  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000528  000005bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800072  00800072  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fa  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006de  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000516  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b8  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_1>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  8a:	0c 94 92 02 	jmp	0x524	; 0x524 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <createQueue>:
char queueIsEmpty(struct Queue* q){
	if(q->front->next == NULL)
		return 1;
	
	return 0;
}
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 71 01 	call	0x2e2	; 0x2e2 <malloc>
  9a:	fc 01       	movw	r30, r24
  9c:	13 82       	std	Z+3, r1	; 0x03
  9e:	12 82       	std	Z+2, r1	; 0x02
  a0:	11 82       	std	Z+1, r1	; 0x01
  a2:	10 82       	st	Z, r1
  a4:	08 95       	ret

000000a6 <__vector_11>:


// define ISRs here
// ISR for blinking seven segment
ISR (TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	if(flg){
  b6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <flg>
  ba:	88 23       	and	r24, r24
  bc:	51 f0       	breq	.+20     	; 0xd2 <__vector_11+0x2c>
		PORTC = sevseg[next_floor];
  be:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <next_floor>
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e8 59       	subi	r30, 0x98	; 152
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 81       	ld	r24, Z
  ca:	85 bb       	out	0x15, r24	; 21
		flg = 0;
  cc:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <flg>
  d0:	04 c0       	rjmp	.+8      	; 0xda <__vector_11+0x34>
	}else{
		PORTC = 0;
  d2:	15 ba       	out	0x15, r1	; 21
		flg = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <flg>
	}
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_2>:


// ISR for floor detection
ISR (INT1_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	3f 93       	push	r19
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	switch(PINA){
 100:	89 b3       	in	r24, 0x19	; 25
 102:	8b 3f       	cpi	r24, 0xFB	; 251
 104:	81 f0       	breq	.+32     	; 0x126 <__vector_2+0x3c>
 106:	18 f4       	brcc	.+6      	; 0x10e <__vector_2+0x24>
 108:	87 3f       	cpi	r24, 0xF7	; 247
 10a:	89 f0       	breq	.+34     	; 0x12e <__vector_2+0x44>
 10c:	13 c0       	rjmp	.+38     	; 0x134 <__vector_2+0x4a>
 10e:	8d 3f       	cpi	r24, 0xFD	; 253
 110:	31 f0       	breq	.+12     	; 0x11e <__vector_2+0x34>
 112:	8e 3f       	cpi	r24, 0xFE	; 254
 114:	79 f4       	brne	.+30     	; 0x134 <__vector_2+0x4a>
		case 0b11111110 :{
			floor_number = 1;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
 11c:	0b c0       	rjmp	.+22     	; 0x134 <__vector_2+0x4a>
		case 0b11111101 :{
			floor_number = 2;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
 124:	07 c0       	rjmp	.+14     	; 0x134 <__vector_2+0x4a>
		case 0b11111011 :{
			floor_number = 3;
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
 12c:	03 c0       	rjmp	.+6      	; 0x134 <__vector_2+0x4a>
		case 0b11110111 :{
			floor_number = 4;
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <floor_number>
		}	break;
	}
	PORTA = 0xFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	8b bb       	out	0x1b, r24	; 27
	if(next_floor == floor_number){
 138:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <next_floor>
 13c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <floor_number>
 140:	98 13       	cpse	r25, r24
 142:	11 c0       	rjmp	.+34     	; 0x166 <__vector_2+0x7c>
		PORTD &= (255 << 2); // stop the motor
 144:	82 b3       	in	r24, 0x12	; 18
 146:	8c 7f       	andi	r24, 0xFC	; 252
 148:	82 bb       	out	0x12, r24	; 18
		PORTD &= (~(1 << (next_floor + 3))); // open the door lock for the current floor
 14a:	22 b3       	in	r18, 0x12	; 18
 14c:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <next_floor>
 150:	3d 5f       	subi	r19, 0xFD	; 253
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <__vector_2+0x72>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	3a 95       	dec	r19
 15e:	e2 f7       	brpl	.-8      	; 0x158 <__vector_2+0x6e>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	82 bb       	out	0x12, r24	; 18
	}
	TCCR0 = 0;
 166:	13 be       	out	0x33, r1	; 51
	PORTC = sevseg[floor_number];
 168:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <floor_number>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e8 59       	subi	r30, 0x98	; 152
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	85 bb       	out	0x15, r24	; 21
	if(flg0 == 0){
 176:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 17a:	81 11       	cpse	r24, r1
 17c:	0c c0       	rjmp	.+24     	; 0x196 <__vector_2+0xac>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f e3       	ldi	r18, 0x3F	; 63
 180:	82 e4       	ldi	r24, 0x42	; 66
 182:	9f e0       	ldi	r25, 0x0F	; 15
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <__vector_2+0x9a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <__vector_2+0xa4>
 18e:	00 00       	nop
		_delay_ms(5000);
		flg0 = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
		// here i have to check if queue is not empty setting a flag and doing int0 agian based on the flg0
	}
}
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_1>:


// ISR for buttons detection
ISR (INT0_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
	switch(PINB){
 1be:	86 b3       	in	r24, 0x16	; 22
 1c0:	8f 3e       	cpi	r24, 0xEF	; 239
 1c2:	11 f1       	breq	.+68     	; 0x208 <__vector_1+0x5c>
 1c4:	38 f4       	brcc	.+14     	; 0x1d4 <__vector_1+0x28>
 1c6:	8f 3b       	cpi	r24, 0xBF	; 191
 1c8:	39 f1       	breq	.+78     	; 0x218 <__vector_1+0x6c>
 1ca:	8f 3d       	cpi	r24, 0xDF	; 223
 1cc:	09 f1       	breq	.+66     	; 0x210 <__vector_1+0x64>
 1ce:	8f 37       	cpi	r24, 0x7F	; 127
 1d0:	51 f5       	brne	.+84     	; 0x226 <__vector_1+0x7a>
 1d2:	26 c0       	rjmp	.+76     	; 0x220 <__vector_1+0x74>
 1d4:	8b 3f       	cpi	r24, 0xFB	; 251
 1d6:	81 f0       	breq	.+32     	; 0x1f8 <__vector_1+0x4c>
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <__vector_1+0x34>
 1da:	87 3f       	cpi	r24, 0xF7	; 247
 1dc:	89 f0       	breq	.+34     	; 0x200 <__vector_1+0x54>
 1de:	23 c0       	rjmp	.+70     	; 0x226 <__vector_1+0x7a>
 1e0:	8d 3f       	cpi	r24, 0xFD	; 253
 1e2:	31 f0       	breq	.+12     	; 0x1f0 <__vector_1+0x44>
 1e4:	8e 3f       	cpi	r24, 0xFE	; 254
 1e6:	f9 f4       	brne	.+62     	; 0x226 <__vector_1+0x7a>
		case 0b11111110 :{
			next_floor = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 1ee:	1b c0       	rjmp	.+54     	; 0x226 <__vector_1+0x7a>
		case 0b11111101 :{
			next_floor = 2;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 1f6:	17 c0       	rjmp	.+46     	; 0x226 <__vector_1+0x7a>
		case 0b11111011 :{
			next_floor = 3;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 1fe:	13 c0       	rjmp	.+38     	; 0x226 <__vector_1+0x7a>
		case 0b11110111 :{
			next_floor = 4;
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 206:	0f c0       	rjmp	.+30     	; 0x226 <__vector_1+0x7a>
		case 0b11101111 :{
			next_floor = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 20e:	0b c0       	rjmp	.+22     	; 0x226 <__vector_1+0x7a>
		case 0b11011111 :{
			next_floor = 2;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 216:	07 c0       	rjmp	.+14     	; 0x226 <__vector_1+0x7a>
		case 0b10111111 :{
			next_floor = 3;
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;
 21e:	03 c0       	rjmp	.+6      	; 0x226 <__vector_1+0x7a>
		case 0b01111111 :{
			next_floor = 4;
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <next_floor>
		}	break;		
	}
	
	if(floor_number < next_floor){
 226:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <floor_number>
 22a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <next_floor>
 22e:	98 17       	cp	r25, r24
 230:	30 f4       	brcc	.+12     	; 0x23e <__vector_1+0x92>
		PORTD = 0x01;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	82 bb       	out	0x12, r24	; 18
		PORTD |= 0xF0; // closing all the doors
 236:	82 b3       	in	r24, 0x12	; 18
 238:	80 6f       	ori	r24, 0xF0	; 240
 23a:	82 bb       	out	0x12, r24	; 18
 23c:	19 c0       	rjmp	.+50     	; 0x270 <__vector_1+0xc4>
	}else if( floor_number == next_floor){
 23e:	98 13       	cpse	r25, r24
 240:	12 c0       	rjmp	.+36     	; 0x266 <__vector_1+0xba>
		PORTD |= 0xF0; // closing all the doors
 242:	82 b3       	in	r24, 0x12	; 18
 244:	80 6f       	ori	r24, 0xF0	; 240
 246:	82 bb       	out	0x12, r24	; 18
		PORTD &= (~(1 << (next_floor + 3))); // open the door lock
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <next_floor>
 24e:	3d 5f       	subi	r19, 0xFD	; 253
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <__vector_1+0xae>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	3a 95       	dec	r19
 25c:	e2 f7       	brpl	.-8      	; 0x256 <__vector_1+0xaa>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	82 bb       	out	0x12, r24	; 18
 264:	05 c0       	rjmp	.+10     	; 0x270 <__vector_1+0xc4>
	}else{
		PORTD = 2;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	82 bb       	out	0x12, r24	; 18
		PORTD |= 0xF0; // closing all door locks
 26a:	82 b3       	in	r24, 0x12	; 18
 26c:	80 6f       	ori	r24, 0xF0	; 240
 26e:	82 bb       	out	0x12, r24	; 18
	}
	TCCR0 = 0x05;
 270:	85 e0       	ldi	r24, 0x05	; 5
 272:	83 bf       	out	0x33, r24	; 51
}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <setup>:


void setup(){
	// TODO : all the setup for ports and configs here
	DDRA = 0xF0; // define as input for sensors
 286:	80 ef       	ldi	r24, 0xF0	; 240
 288:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x0F;
 28a:	8f e0       	ldi	r24, 0x0F	; 15
 28c:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0x00; // define as input for input keys
 28e:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF; // set the pull up enable for keys
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	88 bb       	out	0x18, r24	; 24
	DDRC = 0xFF; // set as output for seven segment
 294:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xF3; // last two bits output for motor control other bits input
 296:	93 ef       	ldi	r25, 0xF3	; 243
 298:	91 bb       	out	0x11, r25	; 17
	PORTB = 0xFF; // setting pull up and test for the motor
 29a:	88 bb       	out	0x18, r24	; 24
	
	PORTD = 0b11110011;
 29c:	92 bb       	out	0x12, r25	; 18
	
	GICR |= (1 << INT0); // enabling interrupt 0
 29e:	8b b7       	in	r24, 0x3b	; 59
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= ((1 << ISC01) | (1 << ISC00)); // setting the interrupt 0 to detect rising edge
 2a4:	85 b7       	in	r24, 0x35	; 53
 2a6:	83 60       	ori	r24, 0x03	; 3
 2a8:	85 bf       	out	0x35, r24	; 53
	
	GICR |= (1 << INT1); // enabling interrupt 0
 2aa:	8b b7       	in	r24, 0x3b	; 59
 2ac:	80 68       	ori	r24, 0x80	; 128
 2ae:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= ((1 << ISC11) | (1 << ISC10)); // setting the interrupt 0 to detect rising edge
 2b0:	85 b7       	in	r24, 0x35	; 53
 2b2:	8c 60       	ori	r24, 0x0C	; 12
 2b4:	85 bf       	out	0x35, r24	; 53
	
	TIMSK = 0x01;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	89 bf       	out	0x39, r24	; 57
	
	// really i can say now i am a good avr developer
	sei(); // enabling global interrupt	
 2ba:	78 94       	sei
	
	PORTC = sevseg[next_floor];
 2bc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <next_floor>
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	e8 59       	subi	r30, 0x98	; 152
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	90 81       	ld	r25, Z
 2c8:	95 bb       	out	0x15, r25	; 21
	
	flg0 = 1;
 2ca:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end>
	q = createQueue();
 2ce:	0e 94 49 00 	call	0x92	; 0x92 <createQueue>
 2d2:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <q+0x1>
 2d6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <q>
 2da:	08 95       	ret

000002dc <main>:


int main(void)
{
	
	setup();
 2dc:	0e 94 43 01 	call	0x286	; 0x286 <setup>
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <main+0x4>

000002e2 <malloc>:
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	91 05       	cpc	r25, r1
 2ee:	10 f4       	brcc	.+4      	; 0x2f4 <malloc+0x12>
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__flp>
 2f8:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__flp+0x1>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	a0 e0       	ldi	r26, 0x00	; 0
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	30 97       	sbiw	r30, 0x00	; 0
 306:	19 f1       	breq	.+70     	; 0x34e <malloc+0x6c>
 308:	40 81       	ld	r20, Z
 30a:	51 81       	ldd	r21, Z+1	; 0x01
 30c:	02 81       	ldd	r16, Z+2	; 0x02
 30e:	13 81       	ldd	r17, Z+3	; 0x03
 310:	48 17       	cp	r20, r24
 312:	59 07       	cpc	r21, r25
 314:	c8 f0       	brcs	.+50     	; 0x348 <malloc+0x66>
 316:	84 17       	cp	r24, r20
 318:	95 07       	cpc	r25, r21
 31a:	69 f4       	brne	.+26     	; 0x336 <malloc+0x54>
 31c:	10 97       	sbiw	r26, 0x00	; 0
 31e:	31 f0       	breq	.+12     	; 0x32c <malloc+0x4a>
 320:	12 96       	adiw	r26, 0x02	; 2
 322:	0c 93       	st	X, r16
 324:	12 97       	sbiw	r26, 0x02	; 2
 326:	13 96       	adiw	r26, 0x03	; 3
 328:	1c 93       	st	X, r17
 32a:	27 c0       	rjmp	.+78     	; 0x37a <malloc+0x98>
 32c:	00 93 78 00 	sts	0x0078, r16	; 0x800078 <__flp>
 330:	10 93 79 00 	sts	0x0079, r17	; 0x800079 <__flp+0x1>
 334:	22 c0       	rjmp	.+68     	; 0x37a <malloc+0x98>
 336:	21 15       	cp	r18, r1
 338:	31 05       	cpc	r19, r1
 33a:	19 f0       	breq	.+6      	; 0x342 <malloc+0x60>
 33c:	42 17       	cp	r20, r18
 33e:	53 07       	cpc	r21, r19
 340:	18 f4       	brcc	.+6      	; 0x348 <malloc+0x66>
 342:	9a 01       	movw	r18, r20
 344:	bd 01       	movw	r22, r26
 346:	ef 01       	movw	r28, r30
 348:	df 01       	movw	r26, r30
 34a:	f8 01       	movw	r30, r16
 34c:	db cf       	rjmp	.-74     	; 0x304 <malloc+0x22>
 34e:	21 15       	cp	r18, r1
 350:	31 05       	cpc	r19, r1
 352:	f9 f0       	breq	.+62     	; 0x392 <malloc+0xb0>
 354:	28 1b       	sub	r18, r24
 356:	39 0b       	sbc	r19, r25
 358:	24 30       	cpi	r18, 0x04	; 4
 35a:	31 05       	cpc	r19, r1
 35c:	80 f4       	brcc	.+32     	; 0x37e <malloc+0x9c>
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	9b 81       	ldd	r25, Y+3	; 0x03
 362:	61 15       	cp	r22, r1
 364:	71 05       	cpc	r23, r1
 366:	21 f0       	breq	.+8      	; 0x370 <malloc+0x8e>
 368:	fb 01       	movw	r30, r22
 36a:	93 83       	std	Z+3, r25	; 0x03
 36c:	82 83       	std	Z+2, r24	; 0x02
 36e:	04 c0       	rjmp	.+8      	; 0x378 <malloc+0x96>
 370:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__flp+0x1>
 374:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__flp>
 378:	fe 01       	movw	r30, r28
 37a:	32 96       	adiw	r30, 0x02	; 2
 37c:	44 c0       	rjmp	.+136    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 37e:	fe 01       	movw	r30, r28
 380:	e2 0f       	add	r30, r18
 382:	f3 1f       	adc	r31, r19
 384:	81 93       	st	Z+, r24
 386:	91 93       	st	Z+, r25
 388:	22 50       	subi	r18, 0x02	; 2
 38a:	31 09       	sbc	r19, r1
 38c:	39 83       	std	Y+1, r19	; 0x01
 38e:	28 83       	st	Y, r18
 390:	3a c0       	rjmp	.+116    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 392:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__brkval>
 396:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__brkval+0x1>
 39a:	23 2b       	or	r18, r19
 39c:	41 f4       	brne	.+16     	; 0x3ae <malloc+0xcc>
 39e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 3a2:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 3a6:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <__brkval+0x1>
 3aa:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <__brkval>
 3ae:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 3b2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 3b6:	21 15       	cp	r18, r1
 3b8:	31 05       	cpc	r19, r1
 3ba:	41 f4       	brne	.+16     	; 0x3cc <malloc+0xea>
 3bc:	2d b7       	in	r18, 0x3d	; 61
 3be:	3e b7       	in	r19, 0x3e	; 62
 3c0:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 3c4:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 3c8:	24 1b       	sub	r18, r20
 3ca:	35 0b       	sbc	r19, r21
 3cc:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__brkval>
 3d0:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__brkval+0x1>
 3d4:	e2 17       	cp	r30, r18
 3d6:	f3 07       	cpc	r31, r19
 3d8:	a0 f4       	brcc	.+40     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3da:	2e 1b       	sub	r18, r30
 3dc:	3f 0b       	sbc	r19, r31
 3de:	28 17       	cp	r18, r24
 3e0:	39 07       	cpc	r19, r25
 3e2:	78 f0       	brcs	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e4:	ac 01       	movw	r20, r24
 3e6:	4e 5f       	subi	r20, 0xFE	; 254
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	24 17       	cp	r18, r20
 3ec:	35 07       	cpc	r19, r21
 3ee:	48 f0       	brcs	.+18     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f0:	4e 0f       	add	r20, r30
 3f2:	5f 1f       	adc	r21, r31
 3f4:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <__brkval+0x1>
 3f8:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <__brkval>
 3fc:	81 93       	st	Z+, r24
 3fe:	91 93       	st	Z+, r25
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	e0 e0       	ldi	r30, 0x00	; 0
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	cf 01       	movw	r24, r30
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <free>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	09 f4       	brne	.+2      	; 0x41c <free+0xa>
 41a:	81 c0       	rjmp	.+258    	; 0x51e <free+0x10c>
 41c:	fc 01       	movw	r30, r24
 41e:	32 97       	sbiw	r30, 0x02	; 2
 420:	13 82       	std	Z+3, r1	; 0x03
 422:	12 82       	std	Z+2, r1	; 0x02
 424:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <__flp>
 428:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <__flp+0x1>
 42c:	10 97       	sbiw	r26, 0x00	; 0
 42e:	81 f4       	brne	.+32     	; 0x450 <free+0x3e>
 430:	20 81       	ld	r18, Z
 432:	31 81       	ldd	r19, Z+1	; 0x01
 434:	82 0f       	add	r24, r18
 436:	93 1f       	adc	r25, r19
 438:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__brkval>
 43c:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__brkval+0x1>
 440:	28 17       	cp	r18, r24
 442:	39 07       	cpc	r19, r25
 444:	51 f5       	brne	.+84     	; 0x49a <free+0x88>
 446:	f0 93 77 00 	sts	0x0077, r31	; 0x800077 <__brkval+0x1>
 44a:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <__brkval>
 44e:	67 c0       	rjmp	.+206    	; 0x51e <free+0x10c>
 450:	ed 01       	movw	r28, r26
 452:	20 e0       	ldi	r18, 0x00	; 0
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	ce 17       	cp	r28, r30
 458:	df 07       	cpc	r29, r31
 45a:	40 f4       	brcc	.+16     	; 0x46c <free+0x5a>
 45c:	4a 81       	ldd	r20, Y+2	; 0x02
 45e:	5b 81       	ldd	r21, Y+3	; 0x03
 460:	9e 01       	movw	r18, r28
 462:	41 15       	cp	r20, r1
 464:	51 05       	cpc	r21, r1
 466:	f1 f0       	breq	.+60     	; 0x4a4 <free+0x92>
 468:	ea 01       	movw	r28, r20
 46a:	f5 cf       	rjmp	.-22     	; 0x456 <free+0x44>
 46c:	d3 83       	std	Z+3, r29	; 0x03
 46e:	c2 83       	std	Z+2, r28	; 0x02
 470:	40 81       	ld	r20, Z
 472:	51 81       	ldd	r21, Z+1	; 0x01
 474:	84 0f       	add	r24, r20
 476:	95 1f       	adc	r25, r21
 478:	c8 17       	cp	r28, r24
 47a:	d9 07       	cpc	r29, r25
 47c:	59 f4       	brne	.+22     	; 0x494 <free+0x82>
 47e:	88 81       	ld	r24, Y
 480:	99 81       	ldd	r25, Y+1	; 0x01
 482:	84 0f       	add	r24, r20
 484:	95 1f       	adc	r25, r21
 486:	02 96       	adiw	r24, 0x02	; 2
 488:	91 83       	std	Z+1, r25	; 0x01
 48a:	80 83       	st	Z, r24
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	9b 81       	ldd	r25, Y+3	; 0x03
 490:	93 83       	std	Z+3, r25	; 0x03
 492:	82 83       	std	Z+2, r24	; 0x02
 494:	21 15       	cp	r18, r1
 496:	31 05       	cpc	r19, r1
 498:	29 f4       	brne	.+10     	; 0x4a4 <free+0x92>
 49a:	f0 93 79 00 	sts	0x0079, r31	; 0x800079 <__flp+0x1>
 49e:	e0 93 78 00 	sts	0x0078, r30	; 0x800078 <__flp>
 4a2:	3d c0       	rjmp	.+122    	; 0x51e <free+0x10c>
 4a4:	e9 01       	movw	r28, r18
 4a6:	fb 83       	std	Y+3, r31	; 0x03
 4a8:	ea 83       	std	Y+2, r30	; 0x02
 4aa:	49 91       	ld	r20, Y+
 4ac:	59 91       	ld	r21, Y+
 4ae:	c4 0f       	add	r28, r20
 4b0:	d5 1f       	adc	r29, r21
 4b2:	ec 17       	cp	r30, r28
 4b4:	fd 07       	cpc	r31, r29
 4b6:	61 f4       	brne	.+24     	; 0x4d0 <free+0xbe>
 4b8:	80 81       	ld	r24, Z
 4ba:	91 81       	ldd	r25, Z+1	; 0x01
 4bc:	84 0f       	add	r24, r20
 4be:	95 1f       	adc	r25, r21
 4c0:	02 96       	adiw	r24, 0x02	; 2
 4c2:	e9 01       	movw	r28, r18
 4c4:	99 83       	std	Y+1, r25	; 0x01
 4c6:	88 83       	st	Y, r24
 4c8:	82 81       	ldd	r24, Z+2	; 0x02
 4ca:	93 81       	ldd	r25, Z+3	; 0x03
 4cc:	9b 83       	std	Y+3, r25	; 0x03
 4ce:	8a 83       	std	Y+2, r24	; 0x02
 4d0:	e0 e0       	ldi	r30, 0x00	; 0
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	8d 91       	ld	r24, X+
 4d8:	9c 91       	ld	r25, X
 4da:	13 97       	sbiw	r26, 0x03	; 3
 4dc:	00 97       	sbiw	r24, 0x00	; 0
 4de:	19 f0       	breq	.+6      	; 0x4e6 <free+0xd4>
 4e0:	fd 01       	movw	r30, r26
 4e2:	dc 01       	movw	r26, r24
 4e4:	f7 cf       	rjmp	.-18     	; 0x4d4 <free+0xc2>
 4e6:	8d 91       	ld	r24, X+
 4e8:	9c 91       	ld	r25, X
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	9d 01       	movw	r18, r26
 4ee:	2e 5f       	subi	r18, 0xFE	; 254
 4f0:	3f 4f       	sbci	r19, 0xFF	; 255
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <__brkval>
 4fa:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <__brkval+0x1>
 4fe:	28 17       	cp	r18, r24
 500:	39 07       	cpc	r19, r25
 502:	69 f4       	brne	.+26     	; 0x51e <free+0x10c>
 504:	30 97       	sbiw	r30, 0x00	; 0
 506:	29 f4       	brne	.+10     	; 0x512 <free+0x100>
 508:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__flp+0x1>
 50c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__flp>
 510:	02 c0       	rjmp	.+4      	; 0x516 <free+0x104>
 512:	13 82       	std	Z+3, r1	; 0x03
 514:	12 82       	std	Z+2, r1	; 0x02
 516:	b0 93 77 00 	sts	0x0077, r27	; 0x800077 <__brkval+0x1>
 51a:	a0 93 76 00 	sts	0x0076, r26	; 0x800076 <__brkval>
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
